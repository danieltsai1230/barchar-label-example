package com.barchart.sample;


import com.codename1.charts.ChartComponent;
import com.codename1.charts.models.CategorySeries;
import com.codename1.charts.models.XYMultipleSeriesDataset;
import com.codename1.charts.renderers.XYMultipleSeriesRenderer;
import com.codename1.charts.renderers.XYSeriesRenderer;
import com.codename1.charts.util.ColorUtil;
import com.codename1.charts.views.BarChart;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Component;
import java.util.ArrayList;
import java.util.List;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class SampleMain {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form hi = new Form("Hi World", BoxLayout.y());
        hi.add(new Label("Hi World"));
        hi.add(barChart());
        hi.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
    public static ChartComponent barChart(){
        XYMultipleSeriesRenderer renderer = new XYMultipleSeriesRenderer();
        XYSeriesRenderer r = new XYSeriesRenderer();
        r.setColor(0x007A9D9F);
        renderer.addSeriesRenderer(r);
        renderer.setBarSpacing(0.5);
        renderer.setShowLabels(true);
        renderer.setShowLegend(false);
        renderer.setOrientation(XYMultipleSeriesRenderer.Orientation.HORIZONTAL);
        List<Double> valueDL = new ArrayList<>();
        List<List<Double>> valueDDL = new ArrayList<>();
        valueDDL.add(valueDL);
        valueDL.add(1.0);
        valueDL.add(2.0);
        valueDL.add(3.0);
        valueDL.add(4.0);
        valueDL.add(5.0);
        valueDL.add(6.0);
        valueDL.add(7.0);
        valueDL.add(8.0);
        valueDL.add(9.0);
        valueDL.add(10.0);
        valueDL.add(11.0);
        valueDL.add(12.0);      
        renderer.setChartTitle("Bar Chart Sample");
        renderer.setXTitle("Month");
        renderer.setYTitle("Dollars");
        renderer.setAxesColor(0x000000);
        renderer.setLabelsColor(0x000000);
        renderer.setAxisTitleTextSize(36);
        renderer.setChartTitleTextSize(36);
        renderer.setLabelsTextSize(36);
        renderer.setLegendTextSize(36);
        renderer.setYLabelsAlign(Component.RIGHT);
        renderer.setShowLegend(false);
        renderer.setYLabelsColor(0,0x000000);
        renderer.setXLabelsColor(0x000000);
        renderer.setPointSize(20f);
        renderer.setApplyBackgroundColor(true);
        renderer.setBackgroundColor(ColorUtil.rgb(255, 255, 255));
        renderer.setMarginsColor(ColorUtil.rgb(255, 255, 255));
        renderer.setMargins(new int[] { 36, 36, 36, 36 });
        XYSeriesRenderer seriesRenderer;
        seriesRenderer = (XYSeriesRenderer) renderer.getSeriesRendererAt(0);
        seriesRenderer.setLineWidth(2);
        renderer.setXLabels(4);
        renderer.setYLabels(4);
        List<Integer> labelIdxs = new ArrayList<>();  
        List<String> labelStrs = new ArrayList<>();
        labelIdxs.add(1);
        labelStrs.add("A");
        labelIdxs.add(4);
        labelStrs.add("B");
        labelIdxs.add(6);
        labelStrs.add("C");
        labelIdxs.add(8);
        labelStrs.add("D");
        for (int i=0; i<labelIdxs.size(); i++){
            renderer.addXTextLabel(labelIdxs.get(i),labelStrs.get(i));
        }        
        int length = renderer.getSeriesRendererCount();
        seriesRenderer = (XYSeriesRenderer) renderer.getSeriesRendererAt(0);
        seriesRenderer.setDisplayChartValues(true);
        XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();
        CategorySeries series = new CategorySeries("Bar Sample");
        List<Double> v = valueDL;
        int seriesLength = v.size();
        for (int k = 0; k < seriesLength; k++) {
            series.add(v.get(k));
        }
        dataset.addSeries(series.toXYSeries());
        BarChart chart = new BarChart(dataset, renderer, BarChart.Type.DEFAULT);
        return new ChartComponent(chart);       
    }
}
